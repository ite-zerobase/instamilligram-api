<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.zerobase.instamilligramapi.domain.users.UserMapper">


    <insert id="insertUser" parameterType="UserIn" useGeneratedKeys="true" keyColumn="user_id" keyProperty="userId">
        INSERT INTO users
        (
            username,
            email,
            password_hash,
            profile_picture_url,
            nickname,
            job,
            bio
        )
        VALUES (
            #{username},
            #{email},
            #{passwordHash},
            #{profilePictureUrl},
            #{nickname},
            #{job},
            #{bio}
        )
        RETURNING user_id
    </insert>
    <select id="selectUserByAuth" parameterType="AuthIn" resultType="UserOut">
        SELECT
            user_id,
            username,
            email,
            password_hash,
            profile_picture_url,
            nickname,
            job,
            bio,
            created_at,
            updated_at
        FROM users
        WHERE username = #{username} AND password_hash = #{passwordHash}
    </select>

    <select id="selectUserByUserSearch" parameterType="UserSearch" resultType="UserOut">
        SELECT /* selectUserByUserSearch */
            u.user_id,
            u.username,
            u.email,
            u.password_hash,
            u.profile_picture_url,
            u.nickname,
            u.job,
            u.bio,
            u.created_at,
            u.updated_at,
            (SELECT count(*) FROM posts WHERE created_by = #{username}) AS post_count,
            (SELECT count(*) FROM follows WHERE followee = #{username}) AS follower_count,
            (SELECT count(*) FROM follows WHERE follower = #{username}) AS following_count,
            EXISTS (SELECT f.followed_at FROM follows f WHERE f.follower = #{requestingUser} and f.followee = u.username) as following
        FROM users u
        WHERE u.username = #{username}
    </select>

    <update id="updateUserProfileImageUrl" parameterType="String">
        UPDATE users
        SET profile_picture_url = #{profilePictureUrl},
            updated_at = now()
        WHERE username = #{username}
    </update>

    <select id="selectDuplicateUsername" parameterType="String" resultType="UserOut">
        SELECT
            u.username
        FROM users u
        WHERE username = #{username}
    </select>

    <select id="selectDuplicateEmail" parameterType="String" resultType="UserOut">
        SELECT
            u.email
        FROM users u
        WHERE email = #{email}
    </select>

    <select id="selectFollow" parameterType="Follow" resultType="Follow">
        SELECT /* selectFollow */
            follower,
            followee,
            followed_at
        FROM follows
        WHERE follower = #{follower}
        AND followee = #{followee}
    </select>

    <insert id="insertFollow" parameterType="Follow">
        INSERT INTO follows /* insertFollow */
        (
            follower,
            followee,
            followed_at
        )
        VALUES (
            #{follower},
            #{followee},
            now()
        )
        RETURNING followed_at
    </insert>

    <delete id="deleteFollow" parameterType="Follow">
        DELETE /* deleteFollow */
        FROM follows
        WHERE follower = #{follower} AND followee = #{followee}
    </delete>
</mapper>